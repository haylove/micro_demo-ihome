// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: imgCode.proto

package imgCode

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ImgCode service

func NewImgCodeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ImgCode service

type ImgCodeService interface {
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
}

type imgCodeService struct {
	c    client.Client
	name string
}

func NewImgCodeService(name string, c client.Client) ImgCodeService {
	return &imgCodeService{
		c:    c,
		name: name,
	}
}

func (c *imgCodeService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImgCode.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgCodeService) Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "ImgCode.Check", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImgCode service

type ImgCodeHandler interface {
	Get(context.Context, *Request, *Response) error
	Check(context.Context, *CheckRequest, *CheckResponse) error
}

func RegisterImgCodeHandler(s server.Server, hdlr ImgCodeHandler, opts ...server.HandlerOption) error {
	type imgCode interface {
		Get(ctx context.Context, in *Request, out *Response) error
		Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error
	}
	type ImgCode struct {
		imgCode
	}
	h := &imgCodeHandler{hdlr}
	return s.Handle(s.NewHandler(&ImgCode{h}, opts...))
}

type imgCodeHandler struct {
	ImgCodeHandler
}

func (h *imgCodeHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.ImgCodeHandler.Get(ctx, in, out)
}

func (h *imgCodeHandler) Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.ImgCodeHandler.Check(ctx, in, out)
}
