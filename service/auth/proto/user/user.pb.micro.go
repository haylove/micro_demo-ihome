// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Auth service

func NewAuthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Auth service

type AuthService interface {
	Register(ctx context.Context, in *User, opts ...client.CallOption) (*UserEntity, error)
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Register(ctx context.Context, in *User, opts ...client.CallOption) (*UserEntity, error) {
	req := c.c.NewRequest(c.name, "Auth.Register", in)
	out := new(UserEntity)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error) {
	req := c.c.NewRequest(c.name, "Auth.Login", in)
	out := new(LoginRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Register(context.Context, *User, *UserEntity) error
	Login(context.Context, *LoginReq, *LoginRes) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		Register(ctx context.Context, in *User, out *UserEntity) error
		Login(ctx context.Context, in *LoginReq, out *LoginRes) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) Register(ctx context.Context, in *User, out *UserEntity) error {
	return h.AuthHandler.Register(ctx, in, out)
}

func (h *authHandler) Login(ctx context.Context, in *LoginReq, out *LoginRes) error {
	return h.AuthHandler.Login(ctx, in, out)
}
