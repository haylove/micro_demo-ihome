// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: smscode.proto

package smscode

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SmsCode service

func NewSmsCodeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SmsCode service

type SmsCodeService interface {
	SendSms(ctx context.Context, in *SmsRequest, opts ...client.CallOption) (*SmsResponse, error)
	Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
}

type smsCodeService struct {
	c    client.Client
	name string
}

func NewSmsCodeService(name string, c client.Client) SmsCodeService {
	return &smsCodeService{
		c:    c,
		name: name,
	}
}

func (c *smsCodeService) SendSms(ctx context.Context, in *SmsRequest, opts ...client.CallOption) (*SmsResponse, error) {
	req := c.c.NewRequest(c.name, "SmsCode.SendSms", in)
	out := new(SmsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsCodeService) Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "SmsCode.Check", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsCode service

type SmsCodeHandler interface {
	SendSms(context.Context, *SmsRequest, *SmsResponse) error
	Check(context.Context, *CheckRequest, *CheckResponse) error
}

func RegisterSmsCodeHandler(s server.Server, hdlr SmsCodeHandler, opts ...server.HandlerOption) error {
	type smsCode interface {
		SendSms(ctx context.Context, in *SmsRequest, out *SmsResponse) error
		Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error
	}
	type SmsCode struct {
		smsCode
	}
	h := &smsCodeHandler{hdlr}
	return s.Handle(s.NewHandler(&SmsCode{h}, opts...))
}

type smsCodeHandler struct {
	SmsCodeHandler
}

func (h *smsCodeHandler) SendSms(ctx context.Context, in *SmsRequest, out *SmsResponse) error {
	return h.SmsCodeHandler.SendSms(ctx, in, out)
}

func (h *smsCodeHandler) Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.SmsCodeHandler.Check(ctx, in, out)
}
